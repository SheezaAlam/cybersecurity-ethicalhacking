# 1. First cyber guideline — Purpose of Metasploit

**Metasploit purpose:** Metasploit is used to **test & verify vulnerabilities** in systems. It helps security teams find weak points, deliver test payloads in a controlled way, and validate remediation.
In short: Metasploit helps you **check the vulnerability of a system, gain controlled access (in a lab or authorized test), and demonstrate how an exploit can be used so defenders can fix it.**

---

# 2. What is an exploit / payload (simple)

* **Exploit:** A piece of code that takes advantage of a specific vulnerability in a system or application.
* **Payload:** The action delivered by the exploit (e.g., open a remote shell, run a command, or drop a file).
* **How they work together:** The exploit delivers the payload against a vulnerable target; the payload performs the post-exploit action (gives access, collects info, etc.).
* **Result (in a lab):** You get a controlled session or proof that the vulnerability is exploitable so you can report and remediate it.

---

# 3. Quick Metasploit commands & what they do

Run these on **Kali** or a lab system:

1. **Start the database (store scan/exploit data):**

```bash
sudo service postgresql start
# or, depending on distro:
sudo systemctl start postgresql
```

2. **Initialize / start msfdb (only if your distro needs it):**

```bash
sudo msfdb init   # initializes the Metasploit database (one-time). On some systems use msfdb start.
```

3. **Open Metasploit console:**

```bash
msfconsole
```

* This drops you into the Metasploit Framework prompt.

4. **Get help / list commands:**

```text
help
```

* Shows msfconsole built-in help and basic commands.

5. **Search for a module:**

```text
search <term>
# e.g. search smb
```

* Finds exploits, auxiliary modules, scanners, payloads matching the term.

6. **Enter a module:**

```text
use <module_name>
# e.g. use exploit/windows/smb/some_module
```

* Switches context to that module.

7. **Show module options (current settings):**

```text
show options
```

* Shows required parameters (e.g., RHOST, RPORT, LHOST).

8. **Set a module option:**

```text
set <option_name> <value>
# e.g. set RHOST 192.168.56.101
# e.g. set LHOST 192.168.56.1
```

9. **Optional: show advanced options or payloads**

```text
show payloads
show advanced
```

10. **Run the module (launch exploit/auxiliary):**

```text
exploit
# or for some auxiliary modules:
run
```

* Executes the module with the configured options.

---

# 4. Typical (safe) workflow — conceptually

1. **Discover** target services (e.g., with Nmap).
2. **Match** a Metasploit module (search).
3. **Select** module (`use ...`) and view options (`show options`).
4. **Configure** target & local callbacks (`set RHOST`, `set LHOST`, etc.).
5. **Test / run** in non-invasive mode first (auxiliary modules or scanners).
6. **Exploit** only in a controlled lab and capture evidence for your report.
7. **Cleanup**: close sessions, remove any test artifacts, and document findings.

---

# 5. Example (non-destructive, conceptual)

```
# start db & console
sudo service postgresql start
msfconsole

# inside msfconsole
search smb
use auxiliary/scanner/smb/smb_version
set RHOSTS 192.168.56.0/24
run
```

* The above runs an **auxiliary scanner** (non-exploit) to gather info. Only run exploits when you are authorized and ready to document/clean up.

---

# 6. Short reminders for office / internship context

* Always get **written permission** & define scope before testing.
* Log all commands and timestamps — teams want reproducible PoCs.
* Use **non-destructive** checks first (auxiliary scanners) before any exploit.
* Produce a concise report: module used, commands, evidence (sanitized), and remediation recommendations.

---

