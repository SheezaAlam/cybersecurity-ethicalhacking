Perfect üëç here‚Äôs your **clean and final version** of `filetool.py` ‚Äî it includes:

* File encryption
* File decryption
* File integrity check (with SQLite database)
* User-friendly messages
* Stored hashes in `/home/shiza/Desktop/file_integrity.db`
* Graceful handling of password or tampered file errors

---

### üß© Save this as:

`/home/shiza/Desktop/filetool.py`

```python
import os
import sys
import sqlite3
import hashlib
import base64
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Random import get_random_bytes
import argparse

# ---------- Database setup ----------
DB_PATH = "/home/shiza/Desktop/file_integrity.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS files (
                    filename TEXT PRIMARY KEY,
                    hash TEXT NOT NULL
                )''')
    conn.commit()
    conn.close()

# ---------- Hashing ----------
def compute_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            sha256_hash.update(chunk)
    return sha256_hash.hexdigest()

# ---------- Integrity Functions ----------
def store_hash(filename, hash_value):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("REPLACE INTO files (filename, hash) VALUES (?, ?)", (filename, hash_value))
    conn.commit()
    conn.close()

def check_integrity(filename):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT hash FROM files WHERE filename=?", (filename,))
    row = c.fetchone()
    conn.close()

    if not row:
        print(f"‚ö†Ô∏è No stored hash found for {filename}. Please store it first using integrity-check.")
        return

    stored_hash = row[0]
    current_hash = compute_hash(filename)

    if stored_hash == current_hash:
        print(f"‚úÖ File integrity OK ‚Äî {filename} has not been tampered with.")
    else:
        print(f"‚ùå ALERT: {filename} has been modified or tampered!")

# ---------- Encryption ----------
def encrypt_file(file_path, password, output_path):
    salt = get_random_bytes(16)
    key = PBKDF2(password, salt, dkLen=32)
    cipher = AES.new(key, AES.MODE_GCM)
    with open(file_path, "rb") as f:
        plaintext = f.read()
    ciphertext, tag = cipher.encrypt_and_digest(plaintext)
    with open(output_path, "wb") as f:
        [f.write(x) for x in (salt, cipher.nonce, tag, ciphertext)]
    print(f"üîí File encrypted successfully ‚Üí {output_path}")

# ---------- Decryption ----------
def decrypt_file(file_path, password, output_path):
    try:
        with open(file_path, "rb") as f:
            salt, nonce, tag, ciphertext = [f.read(x) for x in (16, 16, 16, -1)]
        key = PBKDF2(password, salt, dkLen=32)
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        plaintext = cipher.decrypt_and_verify(ciphertext, tag)
        with open(output_path, "wb") as f:
            f.write(plaintext)
        print(f"üîì File decrypted successfully ‚Üí {output_path}")
    except ValueError:
        print("‚ùå Decryption failed! The password may be incorrect or the file was tampered with.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")

# ---------- Demo ----------
def demo():
    sample_path = "/home/shiza/Desktop/secret.txt"
    encrypted_path = "/home/shiza/Desktop/secret.txt.enc"
    decrypted_path = "/home/shiza/Desktop/secret_decrypted.txt"
    password = "TestPass123"

    # Create a sample file
    with open(sample_path, "w") as f:
        f.write("This is a secret message. Protect it carefully!")

    print("\n--- Demo: Encrypting File ---")
    encrypt_file(sample_path, password, encrypted_path)

    print("\n--- Demo: Storing Integrity Hash ---")
    file_hash = compute_hash(sample_path)
    store_hash(sample_path, file_hash)
    print(f"üßæ Hash stored in database for integrity check.\n")

    print("--- Demo: Checking Integrity ---")
    check_integrity(sample_path)

    print("\n--- Demo: Decrypting File ---")
    decrypt_file(encrypted_path, password, decrypted_path)

# ---------- Main CLI ----------
def main():
    init_db()

    parser = argparse.ArgumentParser(description="File Encryption + Integrity Checker Tool")
    subparsers = parser.add_subparsers(dest="command")

    # Encrypt
    enc = subparsers.add_parser("encrypt")
    enc.add_argument("file", help="Path to input file")
    enc.add_argument("-p", "--password", required=True, help="Password for encryption")
    enc.add_argument("-o", "--output", required=True, help="Output encrypted file path")

    # Decrypt
    dec = subparsers.add_parser("decrypt")
    dec.add_argument("file", help="Path to encrypted file")
    dec.add_argument("-p", "--password", required=True, help="Password for decryption")
    dec.add_argument("-o", "--output", required=True, help="Output decrypted file path")

    # Integrity Check
    integ = subparsers.add_parser("integrity-check")
    integ.add_argument("file", help="Path to file to check or store")
    integ.add_argument("--store", action="store_true", help="Store hash instead of checking")

    # Demo
    subparsers.add_parser("demo")

    args = parser.parse_args()

    if args.command == "encrypt":
        encrypt_file(args.file, args.password, args.output)
    elif args.command == "decrypt":
        decrypt_file(args.file, args.password, args.output)
    elif args.command == "integrity-check":
        if args.store:
            hash_val = compute_hash(args.file)
            store_hash(args.file, hash_val)
            print(f"‚úÖ Stored hash for {args.file}")
        else:
            check_integrity(args.file)
    elif args.command == "demo":
        demo()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
```

---

### üß† What This Project Does

| Function            | Description                                                                              |
| ------------------- | ---------------------------------------------------------------------------------------- |
| **Encrypt File**    | Encrypts any file using AES-256-GCM with password-based key derivation                   |
| **Decrypt File**    | Safely decrypts a file using the same password                                           |
| **Integrity Check** | Computes and stores a SHA-256 hash in a database, later verifies if the file was changed |
| **Demo Mode**       | Automatically runs all steps (encrypt ‚Üí store hash ‚Üí verify ‚Üí decrypt)                   |

---

### üöÄ Run These Commands in Kali

```bash
cd /home/shiza/Desktop
python3 filetool.py demo
```

Then you can try manually:

```bash
# Encrypt a file
python3 filetool.py encrypt secret.txt -p "MyPass123" -o secret.enc

# Decrypt it
python3 filetool.py decrypt secret.enc -p "MyPass123" -o secret_decrypted.txt

# Store file integrity hash
python3 filetool.py integrity-check secret.txt --store

# Later, check if file changed
python3 filetool.py integrity-check secret.txt
```

---


